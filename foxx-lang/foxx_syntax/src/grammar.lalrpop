// https://lalrpop.github.io/lalrpop/

use crate::ast::*;
use crate::internals::*;
use crate::parse::{LexicalError, Pos, Range};
use crate::tokenize::Token;

grammar<'b>(source_code: &'b str, bump: &'b Bump);

// -----------------------------------------------
// Tokens
// -----------------------------------------------

extern {
    type Location = Pos;
    type Error = LexicalError;

    enum Token {
        "eos" => Token::Eos,
        "decimal_int" => Token::DecimalInt,
        "string" => Token::String,
        "false" => Token::False,
        "fn" => Token::Fn,
        "let" => Token::Let,
        "return" => Token::Return,
        "true" => Token::True,
        "ident" => Token::Ident,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        "{" => Token::LeftBrace,
        "}" => Token::RightBrace,
        "&" => Token::And,
        "&&" => Token::AndAnd,
        "&&&" => Token::AndAndAnd,
        "&=" => Token::AndEqual,
        "!" => Token::Bang,
        "!=" => Token::BangEqual,
        ":" => Token::Colon,
        "::" => Token::ColonColon,
        "," => Token::Comma,
        "." => Token::Dot,
        ".." => Token::DotDot,
        "..=" => Token::DotDotEqual,
        "..<" => Token::DotDotLeft,
        "=" => Token::Equal,
        "==" => Token::EqualEqual,
        "#" => Token::Hash,
        "#!" => Token::HashBang,
        "^" => Token::Hat,
        "^=" => Token::HatEqual,
        "<" => Token::Left,
        "<=" => Token::LeftEqual,
        "<=>" => Token::LeftEqualRight,
        "<<" => Token::LeftLeft,
        "<<=" => Token::LeftLeftEqual,
        "<-" => Token::LeftSlimArrow,
        "-" => Token::Minus,
        "-=" => Token::MinusEqual,
        "--" => Token::MinusMinus,
        "%" => Token::Percent,
        "%=" => Token::PercentEqual,
        "|" => Token::Pipe,
        "|=" => Token::PipeEqual,
        "||" => Token::PipePipe,
        "+" => Token::Plus,
        "+=" => Token::PlusEqual,
        "++" => Token::PlusPlus,
        "?" => Token::Question,
        "??" => Token::QuestionQuestion,
        ">" => Token::Right,
        ">=" => Token::RightEqual,
        "=>" => Token::RightFatArrow,
        "->" => Token::RightSlimArrow,
        ">>" => Token::RightRight,
        ">>=" => Token::RightRightEqual,
        ";" => Token::Semi,
        "/" => Token::Slash,
        "/=" => Token::SlashEqual,
        "*" => Token::Star,
        "*=" => Token::StarEqual,
        "**" => Token::StarStar,
        "**=" => Token::StarStarEqual,
    }
}

// -----------------------------------------------
// Terminals
// -----------------------------------------------

LitToken: Token = {
    <t:"decimal_int"> => t,
    <t:"string"> => t,
    <t:"false"> => t,
    <t:"true"> => t,
};

Lit: ALit<'b> = <l:@L> <t:LitToken> <r:@R> => ALit {
    token: t,
    text: &source_code[l.index()..r.index()],
    range: Range::new(l, r),
};

Name: AName<'b> = <l:@L> "ident" <r:@R> => AName {
    text: &source_code[l.index()..r.index()],
    pos: l,
};

// -----------------------------------------------
// Types
// -----------------------------------------------

Ty: ATy<'b> = {
    <name:Name> => ATy::Name(name),
    "(" <ty:Ty> ")" => ty,
};



Field: AField<'b> = {
    <l:@L> <name:Name> ":" <ty:Ty> <r:@R> => AField { name, ty, range: Range::new(l, r) },
};

NonEmptyFields: BumpVec<'b, AField<'b>> = {
    <field:Field> => bumpalo::vec![in bump; field],
    <mut fields:NonEmptyFields> "," <next:Field> => {
        fields.push(next);
        fields
    }
}

Fields: BumpVec<'b, AField<'b>> = {
    () => bumpalo::vec![in bump],
    <fields:NonEmptyFields> ","? => fields,
}

ParamList: AParamList<'b> = {
    <l:@L> "(" <fields:Fields> ")" <r:@R> => AParamList { fields, range: Range::new(l, r) },
};

Ascribe: ATy<'b> = {
    ":" <ty:Ty> => ty,
};

ResultTy: ATy<'b> = {
    "->" <ty:Ty> => ty,
};

// -----------------------------------------------
// Patterns
// -----------------------------------------------

// -----------------------------------------------
// Expressions
// -----------------------------------------------

AtomicExpr: AExpr<'b> = {
    <lit:Lit> => AExpr::Lit(lit),
    <name:Name> => AExpr::Name(name),
    "(" <expr:Expr> ")" => expr,
}



NonEmptyArgs: BumpVec<'b, AExpr<'b>> = {
    <expr:Expr> => bumpalo::vec![in bump; expr],
    <mut args:NonEmptyArgs> "," <next:Expr> => {
        args.push(next);
        args
    }
}

Args: BumpVec<'b, AExpr<'b>> = {
    () => bumpalo::vec![in bump],
    <args:NonEmptyArgs> ","? => args,
}

ChainExpr: AExpr<'b> = {
    <expr:AtomicExpr> => expr,
    <l:ChainExpr> <pos:@L> "(" <args:Args> ")" => AExpr::new_call(l, args, pos, bump),
}

MulExpr: AExpr<'b> = {
    <expr:ChainExpr> => expr,
    <l:MulExpr> <pos:@L> "*" <r:ChainExpr> => AExpr::new_binary(BinaryOp::Mul, l, r, pos, bump),
    <l:MulExpr> <pos:@L> "/" <r:ChainExpr> => AExpr::new_binary(BinaryOp::Div, l, r, pos, bump),
    <l:MulExpr> <pos:@L> "%" <r:ChainExpr> => AExpr::new_binary(BinaryOp::Modulo, l, r, pos, bump),
}

AddExpr: AExpr<'b> = {
    <expr:MulExpr> => expr,
    <l:AddExpr> <pos:@L> "+" <r:MulExpr> => AExpr::new_binary(BinaryOp::Add, l, r, pos, bump),
    <l:AddExpr> <pos:@L> "-" <r:MulExpr> => AExpr::new_binary(BinaryOp::Sub, l, r, pos, bump),
}

Expr: AExpr<'b> = {
    <expr:AddExpr> => expr,
    <pos:@L> "return" <arg:Expr?> => AExpr::new_return(arg, pos, bump),
}

// -----------------------------------------------
// Statements
// -----------------------------------------------

Stmt: AStmt<'b> = {
    <expr:Expr> "eos" => AStmt::new_expr(expr),
    <pos:@L> "let" <name:Name> <ty_opt:Ascribe?> "=" <init:Expr> "eos" => AStmt::new_let(name, ty_opt, init, pos),
    <pos:@L> "fn" <name:Name> <param_list:ParamList> <result_ty_opt:ResultTy?> "{" <body:Expr> "eos"? "}" => AStmt::new_fn(name, param_list, result_ty_opt, body, pos),
};

pub Root: ARoot<'b> = {
    () => ARoot::new(bump),
    <r:Root> "eos" => r,
    <mut r:Root> <stmt:Stmt> => {
        r.push(stmt);
        r
    }
};
