// https://lalrpop.github.io/lalrpop/

use crate::ast::*;
use crate::parse::{MyLexer, LexicalError, Pos};
use crate::tokenize::Token;
use bumpalo::Bump;

grammar<'b>(source_code: &'b str, bump: &'b Bump);

pub Root: ARoot<'b> = {
    () => ARoot { decls: bumpalo::vec![in bump] },
    <mut r:Root> <decl:Decl> => {
        r.decls.push(decl);
        r
    }
};

pub Decl: ADecl<'b> = {
    <term:Term> "eos" => ADecl(term, ),
};

pub Term: ALit<'b> = {
    <n:Num> => n,
};

Num: ALit<'b> = {
    <l:@L> <n:"num"> <r:@R> => {
        ALit {
            token: n,
            text: &source_code[l.index()..r.index()],
            pos: l,
        }
    }
};

extern {
    type Location = Pos;
    type Error = LexicalError;

    enum Token {
        "eos" => Token::Eos,
        "num" => Token::DecimalInt,
        "+" => Token::Plus,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
    }
}
