
- x tokenize
    - float, escape sequence
- x parse
- scope resolution
    - type
- 評価用の中間表現への変換
- 評価



- フォーマット
- js バックエンド
    - 中間表現への展開
    - パターンマッチの展開



- 構文解析:
    - ファイルごと: 字句解析、構文解析
- 意味解析:
    - ファイルごと: スコープ解析
    - 全体: プロジェクト間の依存関係の解決
    - 全体: use のエイリアスにエンティティを対応付ける
    - 本体ごと (順番): 名前解決、型検査など
        - 引数リストの順番や過不足を決定する
        - シンボルや式の型を推論する
        - 型エラーを出す
        - パターンマッチの網羅性を検査する
- 中間表現 (KIR) への変換:
    - モジュールごと:
        - 引数リストの並び順を直す
        - パターンマッチを展開する
        - タプルを多相レコードに置き換える
        - ラムダリフト
- 最適化:
    - 定数伝播
    - インライン展開
    - 無用コード除去
    - 共通部分式の除去
    - エスケープ解析
- 全体: コード生成

--------------------------------------

モジュールの型定義にしか依存しない場合
後続の関数がコンパイルしなおしになるのを防ぎたい

モジュールの型定義と値定義を分離しておく？
main 関数があるモジュールはすべてエントリーポイントになる

モジュールが再帰的に相互参照しているとき use によるインポート解決はどうなる？
(use が別の use に解決されることはないなら一周すればいいだけ？)



    a <- b <- c <- e
    ^    ^       /
    |     \     /
    |       d <
    |           \
    +----------- f

module levels:
    0: a
    1: b
    2: c, d
    3: e, f

module deps:
    [
        [[], a]
        [[a], b]
        [[a, b], c; [a, b], d]
        [[a, b, c, d], e; [a, b, d], f]
    ]


名前解決の仕組み

syntax scope: 同一ファイル内のシンボル参照を解決し、モジュールからなるシンボルツリーを構成する

- ブロックに入るとき、同一ブロック内の use 以外の文をみて、それが定義するシンボルを列挙してスコープに入れる (再帰参照のため)
- 使用箇所側の パスの先頭またはパスでない識別子 をローカルスコープから解決する。解決できなければ、そのスコープノードの unresolved リストに入れる
- use はこの段階では全く解決されない。スコープノードに入れておく

sema name resolve: use 文を使ってモジュール間のシンボル参照を接合する

- 他のモジュールのシンボルツリーが与えられる
- 各ノードの use 文を解決し、外部のシンボルを割り当てる
    - なければエラーを報告しつつ、エイリアスシンボルの定義箇所として登録する
- 各ノードの未解決シンボルを use により導入・定義されたシンボルに解決する
    - なければエラーを報告する
- 各ノードのパス参照を解決する
