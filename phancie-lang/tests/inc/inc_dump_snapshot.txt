fix fn assert_eq(in actual: int, in expected: int) -> int {
  let mut result: int = extern_assert_eq(
    move actual
    move expected
  ))
  return(move result)
}

fix fn inc(ref x: int) -> int {
  let mut result_2: int = prim_add(
    move x
    move 1
  ))
  let mut result_3: int = prim_assign(
    move x
    move result_2
  ))
  return(move result_3)
}

fix fn main() -> int {
  let mut a: int = prim_id(in 1))
  let mut result_4: int = assert_eq(
    in a
    in 1
  ))
  let mut result_5: int = inc(ref a))
  let mut result_6: int = assert_eq(
    in a
    in 2
  ))
  let mut result_7: int = inc(ref a))
  let mut result_8: int = assert_eq(
    in a
    in 3
  ))
  return(move result_8)
}

__noop
