fix fn assert_eq(in actual: int, in expected: int) -> int {
  let mut result: int = extern_assert_eq(
    move actual
    move expected
  ))
  return(move result)
}

fix fn print(in s: string) -> int {
  let mut result_2: int = extern_print(move s))
  return(move result_2)
}

fix fn main() -> int {
  let mut result_3: int = extern_print(in "before loop\n"))
  let mut a: int = prim_id(in 0))
  fix label do_continue() -> never {
    let mut result_5: int = extern_assert_eq(
      in a
      in a
    ))
    let mut result_7: bool = prim_eq(
      in a
      in 5
    ))
    fix label if_body() -> never {
      do_break()
    }

    and label if_alt() -> never {
      if_next(move /* unit */ 0)
    }

    and label if_next(mut result_6: never) -> never {
      let mut result_11: bool = prim_eq(
        in a
        in 2
      ))
      fix label if_body_2() -> never {
        let mut result_9: int = prim_add(
          move a
          move 2
        ))
        let mut result_10: int = prim_assign(
          move a
          move result_9
        ))
        do_break()
      }

      and label if_alt_2() -> never {
        if_next_2(move /* unit */ 0)
      }

      and label if_next_2(mut result_8: never) -> never {
        let mut result_12: int = prim_add(
          move a
          move 1
        ))
        let mut result_13: int = prim_assign(
          move a
          move result_12
        ))
        do_continue()
      }

      if result_11 {
        if_body_2()
      } else {
        if_alt_2()
      }
    }

    if result_7 {
      if_body()
    } else {
      if_alt()
    }
  }

  and label do_break() -> never {
    let mut result_4: int = extern_print(in "after loop\n"))
    return(move result_4)
  }

  do_continue()
}

__noop
