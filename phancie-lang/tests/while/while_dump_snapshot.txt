fix fn assert_eq(in actual: int, in expected: int) -> int {
  let mut result: int = extern_assert_eq(
    move actual
    move expected
  ))
  return(move result)
}

fix fn main() -> int {
  let mut ok: bool = prim_id(in true))
  let mut a: int = prim_id(in 0))
  fix label do_continue() -> never {
    fix label body() -> never {
      let mut result_3: int = assert_eq(
        in a
        in a
      ))
      let mut result_4: int = prim_add(
        move a
        move 1
      ))
      let mut result_5: int = prim_assign(
        move a
        move result_4
      ))
      let mut result_8: bool = prim_eq(
        in a
        in 5
      ))
      fix label if_body() -> never {
        let mut result_7: bool = prim_assign(
          move ok
          move false
        ))
        if_next(move result_7)
      }

      and label if_alt() -> never {
        if_next(move /* unit */ 0)
      }

      and label if_next(mut result_6: bool) -> never {
        do_continue()
      }

      if result_8 {
        if_body()
      } else {
        if_alt()
      }
    }

    if ok {
      body()
    } else {
      do_break()
    }
  }

  and label do_break() -> never {
    let mut result_2: int = assert_eq(
      in a
      in 5
    ))
    return(move result_2)
  }

  do_continue()
}

__noop
