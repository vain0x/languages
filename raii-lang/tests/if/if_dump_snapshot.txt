fix fn assert_eq(in actual: int, in expected: int) -> () {
  let assert_eq_res = extern_assert_eq(
    in actual
    in expected
  )
  jump return(move assert_eq_res)
}

fix fn print(in s: string) -> () {
  let print_res = extern_print(in s)
  jump return(move print_res)
}

fix fn main() -> () {
  let n = 0
  let n_2 = 0
  let prim_eq_res = prim_eq(
    in n
    in n_2
  )
  fix label if_next(mut res: int) -> never {
    let n_3 = 0
    let n_4 = 1
    let prim_eq_res_2 = prim_eq(
      in n_3
      in n_4
    )
    fix label if_next_2(mut res_2: int) -> never {
      let n_5 = 2
      fix label let_next(val x: infer) -> never {
        let n_6 = 1
        let prim_eq_res_3 = prim_eq(
          in x
          in n_6
        )
        fix label if_next_3(mut res_3: int) -> never {
          jump return(move res_3)
        }

        if prim_eq_res_3 {
          let s_2 = "0 == 1"
          let print_res_2 = print(in s_2)
          jump if_next_3(move print_res_2)
        } else {
          let n_7 = 2
          let prim_eq_res_4 = prim_eq(
            in x
            in n_7
          )
          fix label if_next_4(mut res_4: int) -> never {
            jump if_next_3(move res_4)
          }

          if prim_eq_res_4 {
            let s_3 = "x == 2"
            let print_res_3 = print(in s_3)
            jump if_next_4(move print_res_3)
          } else {
            let s_4 = "x != 1, x != 2"
            let print_res_4 = print(in s_4)
            jump if_next_4(move print_res_4)
          }
        }
      }

      jump let_next(in n_5)
    }

    if prim_eq_res_2 {
      let s_5 = "0 == 1"
      let print_res_5 = print(in s_5)
      jump if_next_2(move print_res_5)
    } else {
      let s_6 = "0 != 1"
      let print_res_6 = print(in s_6)
      jump if_next_2(move print_res_6)
    }
  }

  if prim_eq_res {
    let s_7 = "0 == 0"
    let print_res_7 = print(in s_7)
    jump if_next(move print_res_7)
  } else {
    let s_8 = "0 != 0"
    let print_res_8 = print(in s_8)
    jump if_next(move print_res_8)
  }
}

__noop
