fix fn drop(val _d: string) -> () {
  jump return(prim_jump(move __noop))
}

fix fn borrow(ref _b: string) -> () {
  jump return(prim_jump(move __noop))
}

fix fn main() -> () {
  fix label next(mut result: string) -> never {
    fix label let_next(mut a: string) -> never {
      fix label next_2(mut result_2: ()) -> never {
        fix label next_3(mut result_3: ()) -> never {
          jump return(prim_jump(move result_3))
        }

        jump next_3(borrow(ref a))
      }

      jump next_2(drop(move a))
    }

    jump let_next(prim_jump(in result))
  }

  jump next("hello")
}

__noop
