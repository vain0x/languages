fix fn assert_eq(in actual: int, in expected: int) -> () {
  jump return(extern_assert_eq(
    in actual
    in expected
  ))
}

fix fn main() -> () {
  fix label next(mut result: bool) -> never {
    fix label let_next(mut ok: bool) -> never {
      fix label next_2(mut result_2: int) -> never {
        fix label let_next_2(mut a: int) -> never {
          fix label do_break() -> never {
            fix label next_3(mut result_3: int) -> never {
              fix label next_4(mut result_4: ()) -> never {
                jump return(prim_jump(move result_4))
              }

              jump next_4(assert_eq(
                in a
                in result_3
              ))
            }

            jump next_3(5)
          }

          fix label do_continue() -> never {
            fix label body() -> never {
              fix label next_5(mut result_5: ()) -> never {
                fix label next_6(mut result_6: int) -> never {
                  fix label next_7(mut result_7: int) -> never {
                    fix label next_8(mut result_8: ()) -> never {
                      fix label next_11(mut result_11: int) -> never {
                        fix label next_12(mut result_12: bool) -> never {
                          fix label if_next(mut res: ()) -> never {
                            jump do_continue(prim_jump())
                          }

                          fix label if_alt() -> never {
                            jump if_next(prim_jump(move 0))
                          }

                          fix label if_body() -> never {
                            fix label next_9(mut result_9: bool) -> never {
                              fix label next_10(mut result_10: ()) -> never {
                                jump if_next(prim_jump(move result_10))
                              }

                              jump next_10(prim_assign(
                                ref ok
                                move result_9
                              ))
                            }

                            jump next_9(false)
                          }

                          if result_12 {
                            jump if_body()
                          } else {
                            jump if_alt()
                          }
                        }

                        jump next_12(prim_eq(
                          in a
                          in result_11
                        ))
                      }

                      jump next_11(5)
                    }

                    jump next_8(prim_assign(
                      ref a
                      move result_7
                    ))
                  }

                  jump next_7(prim_add(
                    move a
                    move result_6
                  ))
                }

                jump next_6(1)
              }

              jump next_5(assert_eq(
                in a
                in a
              ))
            }

            if ok {
              jump body()
            } else {
              jump do_break()
            }
          }

          jump do_continue(prim_jump())
        }

        jump let_next_2(prim_jump(in result_2))
      }

      jump next_2(0)
    }

    jump let_next(prim_jump(in result))
  }

  jump next(true)
}

__noop
