module rec XbnfLang.ParseV2

open XbnfLang.HelpersV2
open XbnfLang.TypesV2

let isFollowedByAtom tokens =
  match tokens with
  | StrToken _ :: _ ->
    true

  | IntToken _ :: _ ->
    true

  | IdentToken _ :: _ ->
    true

  | PunToken ("(", _) :: tokens
    when isFollowedByExpr tokens ->
    true

  | _ ->
    false

let isFollowedBySuffix tokens =
  match tokens with
  | _
    when isFollowedByAtom tokens ->
    true

  | _ ->
    false

let isFollowedByPrefix tokens =
  match tokens with
  | PunToken ("+", _) :: tokens
    when isFollowedBySuffix tokens ->
    true

  | PunToken ("-", _) :: tokens
    when isFollowedBySuffix tokens ->
    true

  | _
    when isFollowedBySuffix tokens ->
    true

  | _ ->
    false

let isFollowedByMul tokens =
  match tokens with
  | _
    when isFollowedByPrefix tokens ->
    true

  | _ ->
    false

let isFollowedByAdd tokens =
  match tokens with
  | _
    when isFollowedByMul tokens ->
    true

  | _ ->
    false

let isFollowedByExpr tokens =
  match tokens with
  | _
    when isFollowedByAdd tokens ->
    true

  | _ ->
    false

let parseAtom emit tokens state =
  match tokens with
  | (StrToken x, a) :: tokens ->
    emit (TokenEvent (StrToken x, a)) tokens state

  | (IntToken x, a) :: tokens ->
    emit (TokenEvent (IntToken x, a)) tokens state

  | (IdentToken x, a) :: tokens ->
    emit (TokenEvent (IdentToken x, a)) tokens state

  | (PunToken ("(", _), _) :: _ ->
    let tokens, state =
      match tokens with
      | (PunToken ("(", x), a) :: tokens ->
        emit (TokenEvent (PunToken ("(", x), a)) tokens state

      | _ ->
        failwith "Parse error"

    let tokens, state =
      parseExpr emit tokens state

    match tokens with
    | (PunToken (")", x), a) :: tokens ->
      emit (TokenEvent (PunToken (")", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  | _ ->
    failwith "Parse error"

let parseSuffix emit tokens state =
  let tokens, state =
    parseAtom emit tokens state

  let rec go tokens state =
    match tokens with
    | (PunToken ("(", _), _) :: _ ->
      let tokens, state =
        match tokens with
        | (PunToken ("(", x), a) :: tokens ->
          emit (TokenEvent (PunToken ("(", x), a)) tokens state

        | _ ->
          failwith "Parse error"

      let tokens, state =
        match tokens with
        | (PunToken ("(", _), _) :: _
        | (PunToken ("+", _), _) :: _
        | (PunToken ("-", _), _) :: _
        | (IdentToken _, _) :: _
        | (IntToken _, _) :: _
        | (StrToken _, _) :: _ ->
          let tokens, state =
            parseExpr emit tokens state

          let rec go tokens state =
            match tokens with
            | (PunToken (",", x), a) :: tokens ->
              emit (TokenEvent (PunToken (",", x), a)) tokens state

              let tokens, state =
                parseExpr emit tokens state

              go tokens state

            | _ ->
              tokens, state

          go tokens state

        | _ ->
          tokens, state

      let tokens, state =
        match tokens with
        | (PunToken (")", x), a) :: tokens ->
          emit (TokenEvent (PunToken (")", x), a)) tokens state

        | _ ->
          failwith "Parse error"

      go tokens state

    | _ ->
      tokens, state

  go tokens state

let parsePrefix emit tokens state =
  let tokens, state =
    match tokens with
    | (PunToken ("+", x), a) :: tokens ->
      emit (TokenEvent (PunToken ("+", x), a)) tokens state

    | (PunToken ("-", x), a) :: tokens ->
      emit (TokenEvent (PunToken ("-", x), a)) tokens state

    | _ ->
      tokens, state

  parseSuffix emit tokens state

let parseMul emit tokens state =
  let tokens, state =
    parsePrefix emit tokens state

  let rec go tokens state =
    match tokens with
    | (PunToken ("*", _), _) :: _
    | (PunToken ("/", _), _) :: _ ->
      let tokens, state =
        match tokens with
        | (PunToken ("*", x), a) :: tokens ->
          emit (TokenEvent (PunToken ("*", x), a)) tokens state

        | (PunToken ("/", x), a) :: tokens ->
          emit (TokenEvent (PunToken ("/", x), a)) tokens state

        | _ ->
          failwith "Parse error"

      let tokens, state =
        parsePrefix emit tokens state

      go tokens state

    | _ ->
      tokens, state

  go tokens state

let parseAdd emit tokens state =
  let tokens, state =
    parseMul emit tokens state

  let rec go tokens state =
    match tokens with
    | (PunToken ("+", _), _) :: _
    | (PunToken ("-", _), _) :: _ ->
      let tokens, state =
        match tokens with
        | (PunToken ("+", x), a) :: tokens ->
          emit (TokenEvent (PunToken ("+", x), a)) tokens state

        | (PunToken ("-", x), a) :: tokens ->
          emit (TokenEvent (PunToken ("-", x), a)) tokens state

        | _ ->
          failwith "Parse error"

      let tokens, state =
        parseMul emit tokens state

      go tokens state

    | _ ->
      tokens, state

  go tokens state

let parseExpr emit tokens state =
  parseAdd emit tokens state
