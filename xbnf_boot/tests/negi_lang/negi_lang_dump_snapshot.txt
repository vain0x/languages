# FIRST = {'(', '[', '{', IDENT, INT, STR}
# FOLLOW = {'!=', '%', '%=', '(', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<=', '=', '==', '>', '>=', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
atom = '(' term ')'
     | '[' list ']'
     | '{' '}'
     | INT
     | STR
     | IDENT

# FIRST = {'(', '[', '{', IDENT, INT, STR}
# FOLLOW = {'!=', '%', '%=', '(', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<=', '=', '==', '>', '>=', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
suffix = atom ('[' term ']')*

# FIRST = {'(', '-', '[', '{', IDENT, INT, STR}
# FOLLOW = {'!=', '%', '%=', '(', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<=', '=', '==', '>', '>=', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
prefix = '-'? suffix

# FIRST = {'(', '-', '[', '{', IDENT, INT, STR}
# FOLLOW = {'!=', '%=', '(', ')', '*=', '+', '+=', ',', '-', '-=', '/=', ':', ';', '<', '<=', '=', '==', '>', '>=', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
bin_mul = prefix (('*' | '/' | '%') prefix)*

# FIRST = {'(', '-', '[', '{', IDENT, INT, STR}
# FOLLOW = {'!=', '%=', '(', ')', '*=', '+=', ',', '-', '-=', '/=', ':', ';', '<', '<=', '=', '==', '>', '>=', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
bin_add = bin_mul (('+' | '-') bin_mul)*

# FIRST = {'(', '-', '[', '{', IDENT, INT, STR}
# FOLLOW = {'%=', '(', ')', '*=', '+=', ',', '-', '-=', '/=', ':', ';', '=', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
bin_cmp = bin_add (('==' | '!=' | '<' | '<=' | '>' | '>=') bin_add)*

# FIRST = {'(', '-', '[', '{', IDENT, INT, STR}
# FOLLOW = {'(', ')', ',', '-', ':', ';', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
bin_set = bin_cmp (('=' | '+=' | '-=' | '*=' | '/=' | '%=') term)?

# FIRST = {'(', '-', '[', '{', IDENT, INT, STR}
# FOLLOW = {'(', ')', ',', '-', ':', ';', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
cond = bin_set ('?' term ':' term)?

# FIRST = {'fun'}
# FOLLOW = {'(', ')', ',', '-', ':', ';', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
fun = 'fun' '(' (IDENT (',' IDENT)*)? ')' (block | term)

# FIRST = {'(', '-', '[', 'fun', '{', IDENT, INT, STR}
# FOLLOW = {'(', ')', ',', '-', ':', ';', '?', '[', ']', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
term = fun
     | cond

# NULLABLE
# FIRST = {'(', '-', '[', 'fun', '{', IDENT, INT, STR}
# FOLLOW = {']'}
list = (term (',' term)*)?

# FIRST = {'{'}
# FOLLOW = {'(', ')', ',', '-', ':', ';', '?', '[', ']', 'break', 'else', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
block = '{' exp '}'

# FIRST = {'let'}
# FOLLOW = {'(', '-', ';', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
let = 'let' IDENT '=' term

# FIRST = {'if'}
# FOLLOW = {'(', '-', ';', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
if = 'if' '(' term ')' block ('else' (if | block))?

# FIRST = {'while'}
# FOLLOW = {'(', '-', ';', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
while = 'while' '(' term ')' block

# FIRST = {'return'}
# FOLLOW = {'(', '-', ';', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
return = 'return' term?

# FIRST = {'(', '-', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', IDENT, INT, STR}
# FOLLOW = {'(', '-', ';', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', '}', IDENT, INT, STR}
stmt = let
     | if
     | while
     | 'break'
     | return
     | term

# NULLABLE
# FIRST = {'(', '-', ';', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', IDENT, INT, STR}
# FOLLOW = {'}'}
exp = (';'* stmt)* ';'*

# NULLABLE
# FIRST = {'(', '-', ';', '[', 'break', 'fun', 'if', 'let', 'return', 'while', '{', IDENT, INT, STR}
# FOLLOW = {}
program = exp
