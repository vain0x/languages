module rec XbnfLang.ParseV2

open XbnfLang.HelpersV2
open XbnfLang.TypesV2

let isFollowedByTy tokens =
  match tokens with
  | IdentToken _ :: _ ->
    true

  | _ ->
    false

let isFollowedByPat tokens =
  match tokens with
  | IdentToken _ :: _ ->
    true

  | _ ->
    false

let isFollowedByAtomExpr tokens =
  match tokens with
  | IntToken _ :: _ ->
    true

  | IdentToken _ :: _ ->
    true

  | PunToken ("(", _) :: tokens
    when isFollowedByExpr tokens ->
    true

  | PunToken ("[", _) :: tokens
    when isFollowedByExpr tokens ->
    true

  | PunToken ("[", _) :: PunToken ("]", _) :: _ ->
    true

  | _ ->
    false

let isFollowedByAtomOrBlockExpr tokens =
  match tokens with
  | _
    when isFollowedByAtomExpr tokens ->
    true

  | _
    when isFollowedByBlockLikeExpr tokens ->
    true

  | _ ->
    false

let isFollowedByBlockExpr tokens =
  match tokens with
  | PunToken ("{", _) :: tokens
    when isFollowedByStmt tokens ->
    true

  | PunToken ("{", _) :: tokens
    when isFollowedByExpr tokens ->
    true

  | PunToken ("{", _) :: PunToken ("}", _) :: _ ->
    true

  | _ ->
    false

let isFollowedByIfExpr tokens =
  match tokens with
  | PunToken ("if", _) :: tokens
    when isFollowedByCondExpr tokens ->
    true

  | _ ->
    false

let isFollowedByBlockLikeExpr tokens =
  match tokens with
  | _
    when isFollowedByBlockExpr tokens ->
    true

  | _
    when isFollowedByIfExpr tokens ->
    true

  | _ ->
    false

let isFollowedByExpr tokens =
  match tokens with
  | _
    when isFollowedByAtomOrBlockExpr tokens ->
    true

  | _ ->
    false

let isFollowedByStmt tokens =
  match tokens with
  | _
    when isFollowedByBlockLikeExpr tokens ->
    true

  | _
    when isFollowedByExpr tokens ->
    true

  | _ ->
    false

let isFollowedByParamList tokens =
  match tokens with
  | _
    when isFollowedByPat tokens ->
    true

  | _ ->
    true

  | _ ->
    false

let isFollowedByItem tokens =
  match tokens with
  | PunToken ("fn", _) :: IdentToken _ :: PunToken ("(", _) :: tokens
    when isFollowedByParamList tokens ->
    true

  | _ ->
    false

let isFollowedByItems tokens =
  match tokens with
  | _
    when isFollowedByItem tokens ->
    true

  | _ ->
    true

  | _ ->
    false

let isFollowedByRoot tokens =
  match tokens with
  | _
    when isFollowedByItems tokens ->
    true

  | _ ->
    false

let parseTy emit tokens state =
  match tokens with
  | (IdentToken x, a) :: tokens ->
    emit (TokenEvent (IdentToken x, a)) tokens state

  | _ ->
    failwith "Parse error"

let parsePat emit tokens state =
  match tokens with
  | (IdentToken x, a) :: tokens ->
    emit (TokenEvent (IdentToken x, a)) tokens state

  | _ ->
    failwith "Parse error"

let parseAtomExpr emit tokens state =
  match tokens with
  | (IntToken x, a) :: tokens ->
    emit (TokenEvent (IntToken x, a)) tokens state

  | (IdentToken x, a) :: tokens ->
    emit (TokenEvent (IdentToken x, a)) tokens state

  | (PunToken ("(", _), _) :: _ ->
    let tokens, state =
      match tokens with
      | (PunToken ("(", x), a) :: tokens ->
        emit (TokenEvent (PunToken ("(", x), a)) tokens state

      | _ ->
        failwith "Parse error"

    let tokens, state =
      parseExpr emit tokens state

    match tokens with
    | (PunToken (")", x), a) :: tokens ->
      emit (TokenEvent (PunToken (")", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  | (PunToken ("[", _), _) :: _ ->
    let tokens, state =
      match tokens with
      | (PunToken ("[", x), a) :: tokens ->
        emit (TokenEvent (PunToken ("[", x), a)) tokens state

      | _ ->
        failwith "Parse error"

    let tokens, state =
      match tokens with
      | (PunToken ("(", _), _) :: _
      | (PunToken ("[", _), _) :: _
      | (PunToken ("if", _), _) :: _
      | (PunToken ("{", _), _) :: _
      | (IdentToken _, _) :: _
      | (IntToken _, _) :: _ ->
        let tokens, state =
          parseExpr emit tokens state

        let rec go tokens state =
          match tokens with
          | (PunToken (",", x), a) :: tokens ->
            emit (TokenEvent (PunToken (",", x), a)) tokens state

            let tokens, state =
              parseExpr emit tokens state

            go tokens state

          | _ ->
            tokens, state

        go tokens state

      | _ ->
        tokens, state

    match tokens with
    | (PunToken ("]", x), a) :: tokens ->
      emit (TokenEvent (PunToken ("]", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  | _ ->
    failwith "Parse error"

let parseAtomOrBlockExpr emit tokens state =
  match tokens with
  | (PunToken ("(", _), _) :: _
  | (PunToken ("[", _), _) :: _
  | (IdentToken _, _) :: _
  | (IntToken _, _) :: _ ->
    parseAtomExpr emit tokens state

  | (PunToken ("if", _), _) :: _
  | (PunToken ("{", _), _) :: _ ->
    parseBlockLikeExpr emit tokens state

  | _ ->
    failwith "Parse error"

let parseBlockExpr emit tokens state =
  let tokens, state =
    match tokens with
    | (PunToken ("{", x), a) :: tokens ->
      emit (TokenEvent (PunToken ("{", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  let rec go tokens state =
    match tokens with
    | (PunToken ("(", _), _) :: _
    | (PunToken ("[", _), _) :: _
    | (PunToken ("if", _), _) :: _
    | (PunToken ("{", _), _) :: _
    | (IdentToken _, _) :: _
    | (IntToken _, _) :: _ ->
      let tokens, state =
        parseStmt emit tokens state

      go tokens state

    | _ ->
      tokens, state

  let tokens, state =
    go tokens state

  let tokens, state =
    match tokens with
    | (PunToken ("(", _), _) :: _
    | (PunToken ("[", _), _) :: _
    | (PunToken ("if", _), _) :: _
    | (PunToken ("{", _), _) :: _
    | (IdentToken _, _) :: _
    | (IntToken _, _) :: _ ->
      parseExpr emit tokens state

    | _ ->
      tokens, state

  match tokens with
  | (PunToken ("}", x), a) :: tokens ->
    emit (TokenEvent (PunToken ("}", x), a)) tokens state

  | _ ->
    failwith "Parse error"

let parseIfExpr emit tokens state =
  let tokens, state =
    match tokens with
    | (PunToken ("if", x), a) :: tokens ->
      emit (TokenEvent (PunToken ("if", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  let tokens, state =
    parseCondExpr emit tokens state

  let tokens, state =
    parseBlockExpr emit tokens state

  match tokens with
  | (PunToken ("else", _), _) :: _ ->
    let tokens, state =
      match tokens with
      | (PunToken ("else", x), a) :: tokens ->
        emit (TokenEvent (PunToken ("else", x), a)) tokens state

      | _ ->
        failwith "Parse error"

    match tokens with
    | (PunToken ("{", _), _) :: _ ->
      parseBlockExpr emit tokens state

    | (PunToken ("if", _), _) :: _ ->
      parseIfExpr emit tokens state

    | _ ->
      failwith "Parse error"

  | _ ->
    tokens, state

let parseBlockLikeExpr emit tokens state =
  match tokens with
  | (PunToken ("{", _), _) :: _ ->
    parseBlockExpr emit tokens state

  | (PunToken ("if", _), _) :: _ ->
    parseIfExpr emit tokens state

  | _ ->
    failwith "Parse error"

let parseExpr emit tokens state =
  parseAtomOrBlockExpr emit tokens state

let parseStmt emit tokens state =
  match tokens with
  | (PunToken ("if", _), _) :: _
  | (PunToken ("{", _), _) :: _ ->
    parseBlockLikeExpr emit tokens state

  | (PunToken ("(", _), _) :: _
  | (PunToken ("[", _), _) :: _
  | (IdentToken _, _) :: _
  | (IntToken _, _) :: _ ->
    let tokens, state =
      parseExpr emit tokens state

    match tokens with
    | (PunToken (";", x), a) :: tokens ->
      emit (TokenEvent (PunToken (";", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  | _ ->
    failwith "Parse error"

let parseParamList emit tokens state =
  match tokens with
  | (IdentToken _, _) :: _ ->
    let tokens, state =
      parsePat emit tokens state

    let tokens, state =
      match tokens with
      | (PunToken (":", x), a) :: tokens ->
        emit (TokenEvent (PunToken (":", x), a)) tokens state

      | _ ->
        failwith "Parse error"

    let tokens, state =
      parseTy emit tokens state

    let rec go tokens state =
      match tokens with
      | (PunToken (",", x), a) :: tokens ->
        emit (TokenEvent (PunToken (",", x), a)) tokens state

        let tokens, state =
          parsePat emit tokens state

        let tokens, state =
          match tokens with
          | (PunToken (":", x), a) :: tokens ->
            emit (TokenEvent (PunToken (":", x), a)) tokens state

          | _ ->
            failwith "Parse error"

        let tokens, state =
          parseTy emit tokens state

        go tokens state

      | _ ->
        tokens, state

    go tokens state

  | _ ->
    tokens, state

let parseItem emit tokens state =
  let tokens, state =
    match tokens with
    | (PunToken ("fn", x), a) :: tokens ->
      emit (TokenEvent (PunToken ("fn", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  let tokens, state =
    match tokens with
    | (IdentToken x, a) :: tokens ->
      emit (TokenEvent (IdentToken x, a)) tokens state

    | _ ->
      failwith "Parse error"

  let tokens, state =
    match tokens with
    | (PunToken ("(", x), a) :: tokens ->
      emit (TokenEvent (PunToken ("(", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  let tokens, state =
    parseParamList emit tokens state

  let tokens, state =
    match tokens with
    | (PunToken (")", x), a) :: tokens ->
      emit (TokenEvent (PunToken (")", x), a)) tokens state

    | _ ->
      failwith "Parse error"

  let tokens, state =
    match tokens with
    | (PunToken ("->", _), _) :: _ ->
      let tokens, state =
        match tokens with
        | (PunToken ("->", x), a) :: tokens ->
          emit (TokenEvent (PunToken ("->", x), a)) tokens state

        | _ ->
          failwith "Parse error"

      parseTy emit tokens state

    | _ ->
      tokens, state

  parseBlockExpr emit tokens state

let parseItems emit tokens state =
  let rec go tokens state =
    match tokens with
    | (PunToken ("fn", _), _) :: _ ->
      let tokens, state =
        parseItem emit tokens state

      go tokens state

    | _ ->
      tokens, state

  go tokens state

let parseRoot emit tokens state =
  parseItems emit tokens state
